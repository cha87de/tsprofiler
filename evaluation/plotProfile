#!/usr/bin/python
#######################################
# plotProfile - plots a tsprofiler profile's tx matrix, simulates and plots
# time series from a profile using the a) average and b) the tx matrix.
#
# usage: plotProfile.py [-h] [--simlength SIMLENGTH] [--graphlength GRAPHLENGTH]
#                       profile metric
# 
# Print a TSProfiler profile.
# 
# positional arguments:
#   profile               the file which contains the profile as json
#   metric                specifies the metric name to use, which must be set in
#                         the profile
# 
# optional arguments:
#   -h, --help            show this help message and exit
#   --simlength SIMLENGTH
#                         amount of time points to simulate
#   --graphlength GRAPHLENGTH
#                         amount of time points in the plotted graph. if less
#                         than simlength, values are aggregated
#
# Author: Christopher Hauser <post@c-ha.de>
#######################################
from util import getNextState, getSimTXValue, getSimAvgValue, aggregate, simulateTX, simulateAvg
import json
import matplotlib.pyplot as plt
import argparse
from util import printTSPlot, printTXPlot

def main(file, metricName, simlength, graphlength):
    # read profile from json file
    with open(file) as f:
        profile = json.load(f)

        # take metric with metricName
        metric = {}
        for m in profile["metrics"]:
            if m["name"] == metricName:
                metric = m
                break

        # have we found a metric? if not, return
        if not 'name' in metric:
            print("could not find metric " + metricName)
            return

        # first: print txmatrix
        printTXPlot(metric["txmatrix"])

        # second: run simulation
        print("start tx simulation")
        simulationTX = simulateTX(metric, simlength)
        print("start avg simulation")
        simulationAvg = simulateAvg(metric, simlength)

        # third: print simulated ts
        printTSPlot("tx", aggregate(simulationTX, graphlength))
        printTSPlot("avg", aggregate(simulationAvg, graphlength))


# bootstrap application: handle arguments, then call main
parser = argparse.ArgumentParser(description='Print a TSProfiler profile.')
# file, metricName, simlength, graphlength
parser.add_argument('--simlength', dest='simlength', action='store',
                    default=4000, type=int,
                    help='amount of time points to simulate')
parser.add_argument('--graphlength', dest='graphlength', action='store',
                    default=400, type=int,
                    help='amount of time points in the plotted graph. if less than simlength, values are aggregated')
parser.add_argument('profile', metavar='profile',
                    help='the file which contains the profile as json')
parser.add_argument('metric', metavar='metric',
                    help='specifies the metric name to use, which must be set in the profile')

args = parser.parse_args()
print(args)
main(args.profile, args.metric, args.simlength, args.graphlength)
